#include "stdafx.h"

void main()
{
	// ##1. vector
	// 동적 배열을 기반으로하는 컨테이너
	// 동적 배열 기반이기 때문에 인덱스 접근이 가능하다! -> 탐색이 좋다!
	// 원소 삽입 시에는 앞에서 할 수 없으면 맨 끝에서부터 삽입해 나간다.
	// 중간 삽입 및 삭제 시에는 삽입 공간의 확보, 삭제 공간의 활용을 위해
	// 해당 인덱스 이후 모든 원소들을 포인터 이동해야 한다!
	// -> 원소 개수만큼 시간이 증가한다! 선형 시간
	// 단, 맨 끝에서 삽입 및 삭제 시에는 상수 시간!
	// 동적 배열 기반이므로 배열의 크기를 초과하는 삽입의 시도가 있을 경우
	// 재할당 및 복사가 발생한다!!! -> 삽입/삭제가 불리하다!
	// 중간 원소를 삭제한다 하여도 할당된 메모리 공간은 남아있는다!

	// 삽입 삭제가 불리하다!
	// 탐색이 유리다!!!




	// ##2. list
	// 노드를 기반으로하는 컨테이너
	// 더블 링크드 리스트로 구현된 컨테이너.
	// 앞, 뒤 노드 삽입/삭제가 가능하다!

	// 각 노드는 연속된 메모리에 나열된 것이 아니라
	// 비 연속적인 메모리에 여기저기 저장되어 있지만 포인터로 연결해서
	// 마치 연속된 메모리 공간에 나열된 것처럼 보일 뿐이다!!!

	// 따라서 각 노드에 대한 인덱스 접근이 불가능하다.
	// 인덱스 접근이 불가능하니 탐색 시에는 탐색하고자하는 원소를 찾을 때까지 모든 원소를 순회해야한다.
	// -> 선형 시간

	// 노드의 삽입 및 삭제 시에는 연결되어 있는 포인터의 해제 후 재연결만 하면 된다!
	// -> 상수 시간

	// 배열처럼 한정된 메모리 공간을 사용하는 것이 아니기 때문에
	// 런타임 시에도 사용자가 원하는 만큼 데이터를 삽입 또는 삭제할 수 있다.

	// 삽입 삭제가 유리하다!
	// 탐색이 불리하다!!!


}
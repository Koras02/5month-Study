#include <iostream>

using namespace std;

//void Func(int _n)
//{
//	++_n;
//}

void Func(int* _n)
{
	++(*_n);
}

void main()
{
	int		iA = 1;

	// int* _n = &iA;
	Func(&iA);

	cout << "iA: " << iA << endl;


	////// 포인터 사용 이유
	////// 원본 데이터에 접근하여 값을 읽거나 쓰기 위해서 사용한다!
	////// -> 원본 데이터를 참조하겠다!
	//int		iA = 1;

	////++iA;
	//Func(iA);

	//cout << "iA: " << iA << endl;


	//// 주소 확인
	//// & (어드레스 연산자)
	//// 변수명 앞에 &를 붙이면 해당 변수가 할당된 메모리의 시작 주소를 반환

	//int		iA = 10;

	//cout << "iA: " << iA << endl;
	//cout << "&iA: " << &iA << endl;


	//// 포인터 변수 선언
	//// * (에스크리터/포인터)
	//// 자료형과 변수명 사이에 에스크리터를 추가하면 포인터 변수 선언이 된다.

	//// 3가지 경우 모두 포인터 변수 선언이다!
	//int*  ptr1;
	//int * ptr2;
	//int  *ptr3;



	//// 포인터 변수 초기화
	//int		iA = 10;

	//// ptr은 iA의 주소값을 저장한다.
	//int*	ptr = &iA;


	//// 쓰레기값 초기화
	//// 위험한 초기화다!
	//// 쓰레기 값도 값이다! 포인터 변수는 주소를 저장한다!
	//// 결국 어디를 가리킬지 알 수 없는 주소인것다!!
	//// 만약, 해당 주소가 운영체제를 가동하는데 중요한 위치를 가리킨다면?
	//// 또한, 해당 주소의 값을 사용자가 임의로 변경한다면?
	//// 운영체제에 큰 문제가 발생할 수 있다.

	//// 하지만, 요즘의 운영체제는 할당되지 않은 메모리 접근의 시도를 감지한다면
	//// 해당 프로그램을 강제로 종료시켜버린다.
	//int*	ptr;


	//// 포인터 변수에 0으로 초기화를 진행하면 0으로 채워진 주소 값이 나온다.
	//// 이 때 나오는 주소는 0번지 주소를 의미하는게 아니다!!
	//// 아무런 곳도 가리키고 있지 않다! 라는 의미이다!!!
	////int*	ptr = 0;
	////int*	ptr = NULL;
	//int*	ptr = nullptr;
	//cout << "ptr: " << ptr << endl;


	//int		iA = 10;
	//int*	ptr = &iA;

	//cout << "iA: " << iA << endl;
	//cout << "&iA: " << &iA << endl;
	//cout << "------------------------" << endl;
	//cout << "ptr: " << ptr << endl;



	// 주소를 통한 데이터 확인
	// 역참조
	// * (역참조 연산자)
	// 변수명 앞에 *을 사용하면 역참조 연산자로 사용이 된다.
	// 역참조 연산자는 해당 주소의 값을 확인하는 것이다.
	
	// 변수 선언 시 사용한 *는 에스크리터로 작동한다.
	// 변수 선언 후 사용한 *는 역참조 연산자로 작동한다.

	// 역참조 연산자를 읽는 방법
	// 변수가 가지고 있는 주소로 찾아가 값을 확인해라!

	//int		iA = 10;
	//int*	ptr = &iA;

	//// ptr이 가지고 있는 주소로 찾아가 값을 확인해라!
	//// 해당 값을 999로 대입 받아라!
	//// -> iA의 값이 999로 변경된다!
	//*ptr = 999;

	//cout << "iA: " << iA << endl;
	//cout << "&iA: " << &iA << endl;
	//cout << "------------------------" << endl;
	//cout << "ptr: " << ptr << endl;
	//cout << "*ptr: " << *ptr << endl;

}
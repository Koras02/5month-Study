//#include <iostream>
#include "stdafx.h"
// #: 전처리 지시자 = 컴파일 이전에 처리하라고 지시한다, 무엇을?
// include : 포함하다 = 컴파일 이전에 포함하라고 지시한다, 무엇을?
// <iostream> : C++부터 등장한 표준 입출력 스트림
// i = Input, o = Output, stream = 통로


// 주석 사용방법 = 길기떄문에 칸줄임
// 주석 처리 방법 
// 주석처리방법 
//주석이란?
//코드에 삽입된 메모
//주석 처리가 되면 컴파일 대상에서 제외된다.
//
//주석을 사용하는 이유
//프로그램은 주로 팀 단위로 진행한다!
//내가 작성한 코드를 타인이 볼 경우, 타인이 작성한 코드를 내가 볼 경우
//석 및 파악해야하는데 시간이 오래 걸리는 문제가 발생한다.
//주석을 사용해서 해당 기능을 설명해 놓으면 분석에 대한 시간을 줄일 수 있다!
//
//주석 사용 방법
//##1. 행 단위 주석 : //
//// 이후 작성된 모든 내용은 번역에서 제외된다.
//
//##2. 블록 단위 주석 : /* ~ */
///*부터 */까지 내부에 작성된 모든 내용은 번역에서 제외된다.
//
//
//주석 사용 단축키
//주석 설정 : 컨트롤 + K + C
//주석 해제 : 컨트롤 + K + U
//
//
//주석 사용 시 주의사항
//##1. 블록 단위 주석
///*과 */는 짝을 이루어야 한다.
//
//블록 단위 주석 내부에서 블록 단위 주석을 또 다시 사용할 경우 
//정상적으로 주석처리가 되지 않는다!
//
///*AA /*BB*/ CC*/
//
//##2. 단축키 사용
//컨트롤 + U는 모든 대문자를 소문자로 변경하는 단축키이다!
////AbCdEfG


// using = 지시자, namespace = 이름,공간( 이름공간을 사용하라 명령), std = Standard 의 약자,표준
// 표준이라는 이름의 공간을 사용하라는 뜻.
using namespace std;


// :: (스코프 연산자)
// -> using namespace 선언없이 기능을 사용할 수 있도록 도와주는 것.
// :: 기준으로 좌측에는 이름공간을 명시 
// 우측에는 사용할 기능을 명시하면 정상적으로 해당기능을 사용 가능 하다.



// cout :: Consle Output의 약자.
// 콘솔로 내보내달라 

// << 무엇을 
// 본 기능은 연산자 이지만 cout 과 만나면서 무엇을? 이라는 뜻으로 사용된다.

// "Hello World" : 문자열 
// 단일 문자 : 하나의 문자만 사용한다. 작은 따움표로 감싼다 'A'
// 문자열 : 두 개 이상의 문자를 사용한다, 큰 따움표로 감싼다 'BB'

// endl : End Line의 약자
// 줄바꿈(개행)을 의미한다.

// ; (세미콜론) : 문장 마지막에 마침표를 찍듯이 세미콜론이 있어야만 문장이 종료된다.
// cout << "Hello World" << endl;
// std::cout << "Hello World";

namespace A
{
	void Render()
	{
		cout << 'A' << endl;
	}
}

namespace B
{
	void Render()
	{
		cout << 'B' << endl;
	}
}

using namespace A;
using namespace B;


// main함수 
// 프로그램이 실행될 때 가장 먼저 실행하는 곳을 설정한다.
// 무조건 존재해야하지만 두 개 이상 존재할 수 없다!
// 이름이 main으로 고정되어 있고 변경할 수 없다.
void main()
{
	// 여기 부터
	A::Render();
	B::Render();
 

    
} // 여기 까지 


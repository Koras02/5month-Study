#include "stdafx.h"
 

using namespace std;

void main()
{
	// 비트 단위 쉬프트 연산자 (이항 연산자)
	// <<, >>
	// 본 기능은 쉬프트 연산자이지만 cout 또는 cin을 만나면서 입출력 연산자로 사용되었다.
	// 쉬프트 연산자 기준 좌측(정수형 데이터)의 모든 비트열을 
	// 쉬프트 연산자 기준 우측(정수)의 값 만큼 이동 시켜주는 연산자 

	// 쉬프트 연산자는 2의 n승으로 곱하거나(<<) 나눌때(>>) 사용한다.
	// 단, 비트를 이동시키다 보면 부호비트가 바뀌거나 값이 소실될 수 있다.

	//bitset<8>  bitA = 10, bitB = 0;

	//cout << "bitA:" << bitA << endl;
	//cout << "=================================" << endl;
	//bitB = bitA << 3;

	//cout << "bitB:" << bitB << endl;

	// 축약 연산자 
	// 대입 연산자를 포함하여 두 연산자를 합친 것.
	// += , -=, *=, /= , &= , <<= , >>= , &=  등등등 

	// 코드의 간결화

	/*int     iPlayerHp = 100, iMonsterAtt = 10;

	iPlayerHp = iPlayerHp - iMonsterAtt;
	iPlayerHp -= iMonsterAtt;
*/

	// 증감 연산자 (단항 연산자)
	// ++, -- 
	// 피 연산자의 값을 1 증가 또는 1 감소시켜주는 연산자

	// 단,  연산자가 피 연산자 어디에 붙는지에 다라 작동 방법이 다르다!

	// ##1. 피 연산자 앞에 붙는 경우 
	// -> 전위 증감 
	// -> 선 증감 후 연산 

	/*int   iA = 3;
	cout << (++iA) << endl;
	cout << "iA:" << iA << endl;
	*/
	
	// ##2. 피 연산자 뒤에 붙는 경우 
	// -> 후위 증감
	//// -> 선 연산 후 증감
	//int iA = 3;
	//cout << (iA++) << endl;
	//cout << "iA:" << iA << endl;


	// 전위 증감과 후위 증감의 차이점
	// 전위 증감 
	// -> 피 연산자 본인이 연산에 반영이 된다.


	// 후위 증감
	// -> 본인과 똑같은 임시 객체를 만든다.
	// -> 본인은 증가, 임시 객체를 연산에 반영.
	// -> 임시 객체는 코드라인을 벗어나는 즉시 소멸한다.




}
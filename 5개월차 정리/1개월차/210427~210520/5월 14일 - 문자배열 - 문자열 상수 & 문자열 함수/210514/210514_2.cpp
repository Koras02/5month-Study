#include <iostream>

using namespace std;

void main()
{
	//// 문자열 상수
	//// 큰 따옴표 안에 작성된 문자열을 문자열 상수라한다.
	//// 문자열 상수는 Data 영역에 등록이 된다.
	//// -> 배열의 형태로 등록이 된다.
	//// 이후, 문자열이 사용된 코드에는 Data 영역의 시작 주소를 반환한다.
	//cout << "Hello" << endl;		// == cout << Data영역의 시작주소 << endl;


	//char	szBuff[20] = "Hello";
	//cout << szBuff << endl;

	//// 배열의 이름은 배열이 할당된 메모리의 시작 주소를 의미한다.
	//// 문자열 상수는 Data 영역에 할당된 메모리의 시작 주소를 의미한다.
	//// 결국, 문자를 바꾸는 것이 아니라 주소 값을 변경하라고 명령하는 것이다!
	//// -> 사용자의 의도와 전혀 다르다!!

	//// 배열의 이름에 다른 주소 값 대입이 불가능한 이유
	//// 주소 값이 대입이 가능해진다면 배열이 할당된 메모리를 더이상 찾아갈 수 없게 된다.
	//// 사용하지 않을 공간이 되므로 배열의 이름이 의미하는 주소는 변경이 불가능하다!!
	//szBuff = "World";		// 불가능
	//cout << szBuff << endl;


	//// 문자열 상수의 사용 방법
	//// 문자열 상수는 Data 영역의 시작 주소를 반환한다!
	//// -> 반환된 주소를 저장하여 사용하자!
	//char*	pBuff = "Hello";
	//cout << pBuff << endl;


	//// Data영역에 배열 형태로 등록이 된다!
	//char*	pBuff = "Hello";
	//cout << pBuff[2] << endl;

	//// 코드적으로는 가능해보이나 값 변경을 하면 오류가 발생한다.
	//// Data 영역에 등록된 Hello는 상수의 형태로 등록이 된다.
	//// -> 값 변경이 불가능하다!!!!
	//// 하지만, pBuff의 타입이 단순 char*이기 때문에 컴파일 적으로는 문제가 없다고 판단한다.
	//pBuff[2] = 'L';
	//cout << pBuff << endl;


	// 문자 배열과 문자열 상수의 차이점
	// 문자 배열과 문자열 상수는 const의 위치가 다르다!

	// 문자 배열 : const가 에스크리터 뒤에 붙는 경우와 같다
	// -> char* const pBuff;

	// 문자열 상수 : const가 에스크리터 앞에 붙는 경우와 같다
	// -> const char* pBuff;


}
#include <iostream>

using namespace std;

void main()
{
	// 배열
	// 동일한 특성(자료형)을 가지며, 일정한 규칙(연속된 메모리)에 의해 나열된 데이터 집합
	// -> 변수를 여러개 만드는 방법
	/*
	자료형	변수명[ 배열 수 ]
	*/

	//int		iArr[5];
	//cout << "sizeof(int): " << sizeof(int) << endl;		// 4

	//// sizeof연산자에 변수명을 명시하면 해당 변수가 할당된 메모리의 크기를 반환한다.
	//// iArr는 배열의 변수명이다.
	//// -> int형 5개 공간에 iArr라는 이름이 부여된 것이다.
	//cout << "sizeof(iArr): " << sizeof(iArr) << endl;	// 20


	//// 배열의 초기화
	//// ##1. 쓰레기 값 초기화
	//// -> 5개의 변수가 모두 쓰레기 값으로 초기화가 진행된다.
	//int		iArr[5];

	//// ##2. 0 초기화
	//// 배열의 초기화는 중괄호를 사용한다.
	//// -> 5개의 변수가 모두 0으로 초기화가 진행된다.
	//int		iArr[5] = {};

	//// ##3. 값 초기화
	//// -> 순차적으로 1, 2, 3, 4, 5 초기화가 진행된다.
	//int		iArr[5] = { 1, 2, 3, 4, 5 };

	//// ##4. 일부 값만 초기화
	//// -> 순차적으로 1, 2, 3이 채워지고 나머지 변수는 0으로 채워진다.
	//int		iArr[5] = { 1, 2, 3 };



	//// 인덱스 접근
	//// 배열의 특정 원소에 접근하는 방법
	//// [] 인덱스 접근 연산자를 이용한다.

	////// 배열 선언 시 사용한 []는 배열의 크기를 설정하는 것.
	////// 배열 선언 후 사용한 []는 인덱스 접근을 의미한다.
	//
	//// 배열을 만들고 있기 때문에 크기를 설정하는 것이다.
	//int		iArr[5] = { 1, 2, 3, 4, 5 };

	//// 배열을 만들고 나서 []를 사용했기 때문에 인덱스에 접근하는 것이다.
	//// 배열의 인덱스는 0번부터 시작한다.
	//cout << "iArr[3]: " << iArr[3] << endl;


	//// 배열의 모든 원소 출력
	//int		iArr[5] = { 1, 2, 3, 4, 5 };

	//for (int i = 0; i < 5; ++i)
	//	cout << iArr[i] << endl;

	////cout << iArr[0] << endl;
	////cout << iArr[1] << endl;
	////cout << iArr[2] << endl;
	////cout << iArr[3] << endl;
	////cout << iArr[4] << endl;

	
	//// 인덱스 접근을 이용한 값 변경
	//int		iArr[5] = { 1, 2, 3, 4, 5 };

	//for (int i = 0; i < 5; ++i)
	//	iArr[i] += 10;

	//for (int i = 0; i < 5; ++i)
	//	cout << iArr[i] << endl;


	// 일정한 규칙(연속된 메모리) 확인
	int		iArr[5] = { 1, 2, 3, 4, 5 };

	for (int i = 0; i < 5; ++i)
	{
		cout << "iArr[" << i << "]: " << iArr[i] << endl;
		cout << "&iArr[" << i << "]: " << &iArr[i] << endl;
		cout << "-----------------------------" << endl;
	}

}